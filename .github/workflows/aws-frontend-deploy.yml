---
name: Frontend - Build & Deploy
on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch'
        required: true
        default: 'main'
      env:
        type: environment

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  AWS_SHARED_CLUSTER: multi-tenant-prod
  AWS_APP_NAME: happening-atm-frontend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-west-2

jobs:
  setup_env:
    name: Set-up environment 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}
      - name: Set AWS Env & Image Tag per workflow
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          INPUT_ENV=${{ github.event.inputs.env }}; INPUT_REF=${{ github.event.inputs.ref }}
          echo AWS_APPENV="$AWS_APP_NAME"-$INPUT_ENV >> $GITHUB_ENV
          echo IMAGE_TAG=$SHORT_SHA >> $GITHUB_ENV
          echo "::notice title=Environment::$INPUT_ENV"
          echo "::notice title=Build Version::$IMAGE_TAG"
          echo "::notice title=Triggered by::$GITHUB_ACTOR"
          echo "::notice title=Triggered Event::$GITHUB_EVENT_NAME"
          echo "::notice title=Triggered Workflow GitRef::$GITHUB_HEAD_REF"
    outputs:
      AWS_APPENV: ${{ env.AWS_APPENV }}
      IMAGE_TAG: ${{ env.IMAGE_TAG }}

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [setup_env]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build & Push Image to ECR
        uses: docker/build-push-action@v3
        with:
          context: frontend/
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ needs.setup_env.outputs.AWS_APPENV }}:latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ needs.setup_env.outputs.AWS_APPENV }}:${{ needs.setup_env.outputs.IMAGE_TAG }}

      - name: Logout AWS ECR
        if: ${{ always() }}
        run: docker logout ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [setup_env, build]
    environment:
      name: ${{ github.event.inputs.env }}
    steps:
      - name: Pull Current Task Definition & write to file
        id: aws-task-definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ needs.setup_env.outputs.AWS_APPENV }} \
            --query taskDefinition > task-definition.json
      - name: Interpolate new Docker Image Tag into Task Definition
        id: task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ needs.setup_env.outputs.AWS_APPENV }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ needs.setup_env.outputs.AWS_APPENV }}:${{ needs.setup_env.outputs.IMAGE_TAG }}
      - name: Deploy Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-definition.outputs.task-definition }}
          service: ${{ needs.setup_env.outputs.AWS_APPENV }}
          cluster: ${{ env.AWS_SHARED_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 5 minutes

      - name: Delete pulled Task Definition
        if: ${{ always() }}
        run: rm -f task-definition.json
